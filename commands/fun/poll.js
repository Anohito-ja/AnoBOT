const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');

module.exports = {
  data: new SlashCommandBuilder()
    .setName('poll')
    .setDescription('ÊäïÁ•®„Çí‰ΩúÊàê„Åó„Åæ„Åô„ÄÇ')
    .addStringOption(option =>
      option.setName('question')
        .setDescription('ÊäïÁ•®„ÅÆË≥™Âïè')
        .setRequired(true))
    .addStringOption(option =>
      option.setName('choice1')
        .setDescription('ÈÅ∏ÊäûËÇ¢1')
        .setRequired(true))
    .addStringOption(option =>
      option.setName('choice2')
        .setDescription('ÈÅ∏ÊäûËÇ¢2')
        .setRequired(true))
    .addStringOption(option =>
      option.setName('choice3')
        .setDescription('ÈÅ∏ÊäûËÇ¢3')
        .setRequired(false))
    .addStringOption(option =>
      option.setName('choice4')
        .setDescription('ÈÅ∏ÊäûËÇ¢4')
        .setRequired(false))
    .addStringOption(option =>
      option.setName('choice5')
        .setDescription('ÈÅ∏ÊäûËÇ¢5')
        .setRequired(false))
    .addStringOption(option =>
      option.setName('choice6')
        .setDescription('ÈÅ∏ÊäûËÇ¢6')
        .setRequired(false))
    .addStringOption(option =>
      option.setName('choice7')
        .setDescription('ÈÅ∏ÊäûËÇ¢7')
        .setRequired(false))
    .addStringOption(option =>
      option.setName('choice8')
        .setDescription('ÈÅ∏ÊäûËÇ¢8')
        .setRequired(false))
    .addStringOption(option =>
      option.setName('choice9')
        .setDescription('ÈÅ∏ÊäûËÇ¢9')
        .setRequired(false))
    .addStringOption(option =>
      option.setName('choice10')
        .setDescription('ÈÅ∏ÊäûËÇ¢10')
        .setRequired(false)),
  async execute(interaction) {
    const question = interaction.options.getString('question');
    const choices = [];
    for (let i = 1; i <= 10; i++) {
      const choice = interaction.options.getString(`choice${i}`);
      if (choice) {
        choices.push(choice);
      }
    }
    
    // ÈÅ∏ÊäûËÇ¢„Åå2„Å§Êú™Ê∫Ä„ÅÆÂ†¥Âêà„ÅØ„Ç®„É©„Éº„ÇíËøî„Åô
    if (choices.length < 2) {
      return interaction.reply({ content: 'ÊäïÁ•®„Å´„ÅØÊúÄ‰Ωé2„Å§„ÅÆÈÅ∏ÊäûËÇ¢„ÅåÂøÖË¶Å„Åß„Åô„ÄÇ', ephemeral: true });
    }

    const emojiNumbers = ['1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£', '6Ô∏è‚É£', '7Ô∏è‚É£', '8Ô∏è‚É£', '9Ô∏è‚É£', 'üîü'];
    let description = '';

    for (let i = 0; i < choices.length; i++) {
      description += `${emojiNumbers[i]} ${choices[i]}\n`;
    }

    const pollEmbed = new EmbedBuilder()
      .setColor(0x0099ff)
      .setTitle(`üìä ÊäïÁ•®Ôºö${question}`)
      .setDescription(description)
      .setAuthor({ name: interaction.user.username, iconURL: interaction.user.displayAvatarURL() })
      .setTimestamp()
      .setFooter({ text: 'ÊäïÁ•®„Å´„É™„Ç¢„ÇØ„Ç∑„Éß„É≥„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºÅ' });

    // Embed„ÇíÈÄÅ‰ø°„Åó„ÄÅ„É™„Ç¢„ÇØ„Ç∑„Éß„É≥„ÇíËøΩÂä†
    const reply = await interaction.reply({ embeds: [pollEmbed], fetchReply: true });

    for (let i = 0; i < choices.length; i++) {
      await reply.react(emojiNumbers[i]);
    }
  },
};
